apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def jniLibs = 'src/main/jniLibs'
def getReleaseVersionCode() {

    def versionPropsFile = file('version.properties')
    def version = 150

    Properties versionProps = new Properties()

    def runTasks = gradle.startParameter.taskNames
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
        version = versionProps['VERSION_CODE'].toInteger()
    }
    if (':app:assembleRelease' in runTasks) {
        version = version + 1
        versionProps['VERSION_CODE'] = version.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
    return version
}
def compileType(){
    def runTasks = gradle.startParameter.taskNames
    if (':app:assembleRelease' in runTasks) return 'release'
    return 'debug'
}

android {
    def code = getReleaseVersionCode()

    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "ru.vpro.kernelgesture"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode code
        versionName "1.1.33 (beta build $code)"
        setProperty("archivesBaseName", "anykernelgesture")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            ndkBuild {
                targets "EventReader"
                // use a specific ABI filter if needed
//                abiFilters "armeabi-v7a"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
    lintOptions {
        checkReleaseBuilds false
    }
    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
}

task copyJniLibs(type: Copy) {
    def variant = compileType()
    from ("build/intermediates/ndkBuild/$variant/obj/local/"){
        include '*/EventReader'
    }
    into jniLibs
    rename ('EventReader', 'EventReader.so')
}

afterEvaluate {

    assembleDebug.dependsOn copyJniLibs
    if (project.hasProperty('assembleRelease')) {
        assembleRelease.dependsOn copyJniLibs
    }
}
clean {
    delete jniLibs
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'

    implementation 'com.google.firebase:firebase-core:11.4.2'
    implementation 'com.google.firebase:firebase-ads:11.4.2'
    implementation 'com.google.firebase:firebase-crash:11.4.2'

    implementation 'com.google.android.gms:play-services-ads:11.4.2'
    testCompile 'junit:junit:4.12'
    testCompile 'junit:junit:4.12'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "android.arch.lifecycle:extensions:1.0.0-beta2"

    //  RxJava
    compile 'io.reactivex.rxjava2:rxkotlin:2.1.0'
    compile 'io.reactivex.rxjava2:rxjava:2.1.3'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android-extensions'
